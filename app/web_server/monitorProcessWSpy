#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
sys.path.append('..')
sys.path.append('../../libs')
sys.path.append('../..')

import string
import getopt
import mongoengine
from config import Config
import json
import random
import time
import threading
import socket
from twisted.internet import protocol

from tornado.wsgi import WSGIContainer
from tornado.httpserver import HTTPServer
from tornado.ioloop import IOLoop


monitors = [dict(ip="localhost", port=7011)]
PERIOD_BEAT = 3

def heartbeatDaemon(source_port,monitors_received):
    while True:
        hbSocket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        for monitor in monitors_received:
            hbSocket.sendto("heartbeat#%d#%d"% (int(source_port), int(LISTENER_PORT)), (monitor['ip'],int(monitor['port'])))
        time.sleep(PERIOD_BEAT)

#Interface to receive from outside various datagrams
class UdpProtocol(protocol.DatagramProtocol):


    def datagramReceived(self, data, (host, port)):
        if data.startswith("request_logs"):
            pass
                        

if __name__ == "__main__":
    (options, args) = getopt.getopt(sys.argv[1:], "s:m:l:h",
        ["source=", "monitor=","loadBal=", "help"])
    source_port, load_bal_ip, load_bal_port, monitor_port = None, None, None, None
    for opt, val in options:
        if (opt in ("-s", "--source")):
            source_port = int(val)
        if (opt in ("-m", "--monitor")):
            monitor_port = int(val)
        if (opt in ("-l", "--loadBal")):
            (load_bal_ip, load_bal_port) = val.split(":")
    ip = "localhost"


    cust_logger.add_file("logWeb/logFweb-%d"%os.getpid())

    db = mongoengine.connect("%s#%d"%(ip,source_port))
    #db.dropdatabase("%s#%d"%(ip,source_port))


    heartbeat_thread = threading.Thread(name='heartbeat', target=heartbeatDaemon, args=(source_port,monitors)) #Care about lists as arguments, if not in [] then list is split
    heartbeat_thread.setDaemon(True)
    heartbeat_thread.start()


    reactor.listenUDP(monitor_port, UdpProtocol())
    reactor.run()